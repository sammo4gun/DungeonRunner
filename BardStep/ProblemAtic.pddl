(define (problem door)
  (:domain door)
  (:requirements :expression-variables)
  (:objects knight evil_knight prince - character
            bedroom armory hallway cell - room)
  (:init (at knight cell)
         (at evil_knight gatehouse)
         (at prince cell)
         (has knight key)
         (in axe armory)
         (adjacent hallway cell)
         (adjacent hallway gatehouse)
         (adjacent hallway bedroom)
         (adjacent gatehouse armory)
         (intends knight (doorOpen))
         (intends evil_knight (not (doorOpen)))
         (intends evil_knight (has evil_knight key))
         (intends evil_knight (has evil_knight axe))
         (intends prince (has knight key)))
  (:goal (and (select (possible (and (has knight key)
                                     (doorOpen)))
                      (possible (and (has knight axe)
                                     (doorOpen))))
              (possible (and (has evil_knight key)
                             (has evil_knight axe)))
              (or (not (has knight key))
                  (not (doorOpen)))
              (or (not (has knight axe))
                  (not (doorOpen)))
              (or (not (has evil_knight key))
                  (not (has evil_knight axe))))))