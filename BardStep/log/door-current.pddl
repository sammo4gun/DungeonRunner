(define (problem door)
  (:domain door)
  (:requirements :expression-variables)
  (:objects knight evil_knight prince - character
            bedroom armory hallway cell - room)
  (:init (had evil_knight apple)
         (adjacent hallway bedroom)
         (adjacent gatehouse hallway)
         (adjacent armory gatehouse)
         (had knight apple)
         (had knight axe)
         (adjacent gatehouse armory)
         (adjacent hallway cell)
         (intends evil_knight (has evil_knight key))
         (has knight apple)
         (had evil_knight key)
         (had prince key)
         (at evil_knight armory)
         (intends evil_knight (not (doorOpen)))
         (has evil_knight key)
         (intends evil_knight (has evil_knight axe))
         (adjacent hallway gatehouse)
         (at knight armory)
         (adjacent cell hallway)
         (intends knight (doorOpen))
         (adjacent bedroom hallway)
         (has knight axe)
         (intends prince (has knight key))
         (had knight key)
         (at prince hallway))
  (:goal (and (has knight axe)
              (has knight apple)
              (doorOpen)))
  (:protagonist knight)

  (:bardichegoal
   (good 
    (and (has knight key) (has knight apple) (doorOpen))
    (and (has knight axe) (has knight apple) (doorOpen))
   )
   (bad 
    (and (has evil_knight key) (has evil_knight axe))
   )
  )
)